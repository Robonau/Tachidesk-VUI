import { storeGet, storeSet } from "./StoreStuff.45ae8e68.js";
import { r as ref } from "./index.5cc93081.js";
const ISOLanguages = [
  { code: "all", name: "All", nativeName: "All" },
  { code: "installed", name: "Installed", nativeName: "Installed" },
  {
    code: "updates pending",
    name: "Updates pending",
    nativeName: "Updates pending"
  },
  { code: "other", name: "other langs?", nativeName: "Other" },
  { code: "localsourcelang", name: "Local source", nativeName: "Local source" },
  { code: "en", name: "English", nativeName: "English" },
  { code: "ca", name: "Catalan; Valencian", nativeName: "Catal\xE0" },
  { code: "de", name: "German", nativeName: "Deutsch" },
  { code: "es", name: "Spanish; Castilian", nativeName: "Espa\xF1ol" },
  {
    code: "es-419",
    name: "Spanish; Castilian",
    nativeName: "Espa\xF1ol (Latinoam\xE9rica)"
  },
  { code: "fr", name: "French", nativeName: "Fran\xE7ais" },
  { code: "id", name: "Indonesian", nativeName: "Indonesia" },
  { code: "it", name: "Italian", nativeName: "Italiano" },
  { code: "pt", name: "Portuguese", nativeName: "Portugu\xEAs" },
  { code: "pt-pt", name: "Portuguese", nativeName: "Portugu\xEAs (Portugal)" },
  {
    code: "pt-br",
    name: "Portuguese; Brasil",
    nativeName: "Portugu\xEAs (Brasil)"
  },
  { code: "vi", name: "Vietnamese", nativeName: "Ti\u1EBFng Vi\u1EC7t" },
  { code: "tr", name: "Turkish", nativeName: "T\xFCrk\xE7e" },
  { code: "ru", name: "Russian", nativeName: "\u0440\u0443\u0441\u0441\u043A\u0438\u0439" },
  { code: "ar", name: "Arabic", nativeName: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629" },
  { code: "hi", name: "Hindi", nativeName: "\u0939\u093F\u0928\u094D\u0926\u0940" },
  { code: "th", name: "Thai", nativeName: "\u0E44\u0E17\u0E22" },
  { code: "zh", name: "Chinese", nativeName: "\u4E2D\u6587" },
  { code: "zh-hans", name: "Chinese", nativeName: "\u4E2D\u6587 (HANS)" },
  { code: "zh-hant", name: "Chinese", nativeName: "\u4E2D\u6587 (HANT)" },
  { code: "zh-rhk", name: "Chinese", nativeName: "\u4E2D\u6587 (RHK)" },
  { code: "zh-rtw", name: "Chinese", nativeName: "\u4E2D\u6587 (RTW)" },
  { code: "ja", name: "Japanese", nativeName: "\u65E5\u672C\u8A9E" },
  { code: "ko", name: "Korean", nativeName: "\uD55C\uAD6D\uC5B4" },
  { code: "zu", name: "Zulu", nativeName: "isiZulu" },
  { code: "xh", name: "Xhosa", nativeName: "isiXhosa" },
  { code: "uk", name: "Ukrainian", nativeName: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430" },
  { code: "ro", name: "Romanian", nativeName: "Rom\xE2n\u0103" },
  { code: "bg", name: "Bulgarian", nativeName: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438" },
  { code: "cs", name: "Czech", nativeName: "\u010De\u0161tina" },
  { code: "pl", name: "Polish", nativeName: "polski" },
  { code: "no", name: "Norwegian", nativeName: "Norsk" },
  { code: "nl", name: "Dutch", nativeName: "Nederlands" },
  { code: "my", name: "Burmese", nativeName: "\u1017\u1019\u102C\u1005\u102C" },
  { code: "ms", name: "Malay", nativeName: "Malaysia" },
  { code: "mn", name: "Mongolian", nativeName: "\u041C\u043E\u043D\u0433\u043E\u043B" },
  { code: "ml", name: "Malayalam", nativeName: "\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02" },
  { code: "ku", name: "Kurdish", nativeName: "Kurd\xEE" },
  { code: "hu", name: "Hungarian", nativeName: "Magyar" },
  { code: "hr", name: "Croatian", nativeName: "Hrvatski" },
  { code: "he", name: "Hebrew", nativeName: "\u05E2\u05D1\u05E8\u05D9\u05EA" },
  { code: "fil", name: "Filipino", nativeName: "Filipino" },
  { code: "fi", name: "Finnish", nativeName: "suomi" },
  { code: "fa", name: "Persian", nativeName: "\u0641\u0627\u0631\u0633\u06CC" },
  { code: "eu", name: "Basque", nativeName: "euskara" },
  { code: "el", name: "Greek", nativeName: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC" },
  { code: "da", name: "Danish", nativeName: "dansk" },
  { code: "bn", name: "Bengali", nativeName: "\u09AC\u09BE\u0982\u09B2\u09BE" },
  { code: "lt", name: "Lithuanian", nativeName: "lietuvi\u0173 kalba" },
  { code: "sh", name: "Serbo-Croatian", nativeName: "srpskohrvatski" },
  { code: "af", name: "Afrikaans", nativeName: "Afrikaans" },
  { code: "am", name: "Amharic", nativeName: "\u12A0\u121B\u122D\u129B" },
  { code: "az", name: "Azerbaijani", nativeName: "Az\u0259rbaycan" },
  { code: "be", name: "Belarusian", nativeName: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F" },
  { code: "bs", name: "Bosnian", nativeName: "bosanski" },
  { code: "sv", name: "Swedish", nativeName: "svenska" },
  { code: "sv", name: "Swedish", nativeName: "svenska" }
];
function langCodeToName(code) {
  const whereToCut = code.indexOf("-") !== -1 ? code.indexOf("-") : code.length;
  const proccessedCode = code.toLocaleLowerCase().substring(0, whereToCut);
  let result = `language with code: ${code}`;
  for (let i = 0; i < ISOLanguages.length; i++) {
    if (ISOLanguages[i].code === proccessedCode || ISOLanguages[i].code === code.toLocaleLowerCase()) {
      result = ISOLanguages[i].nativeName;
    }
  }
  return result;
}
const langSortCmp = (a, b) => {
  const aLang = langCodeToName(a);
  const bLang = langCodeToName(b);
  if (a === "en")
    return -1;
  if (b === "en")
    return 1;
  if (a === "localSourceLang")
    return 1;
  if (b === "localSourceLang")
    return -1;
  return aLang > bLang ? 1 : -1;
};
const langs = ref([
  ...storeGet("ExtLangFilt", []),
  "all",
  "updates pending",
  "installed"
]);
const currlangs = ref([]);
function useInBar() {
  const setlangs = (data) => {
    storeSet(
      "ExtLangFilt",
      data.filter((e) => !["all", "updates pending", "installed"].includes(e)),
      []
    );
    langs.value = [...data];
  };
  const setcurrlangs = (data) => {
    currlangs.value = data;
  };
  return {
    setcurrlangs,
    currlangs,
    setlangs,
    langs
  };
}
export { langCodeToName as a, langSortCmp as l, useInBar as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
