function isdlsock(msg) {
  const tmp = msg.queue;
  let itis = true;
  if (Array.isArray(tmp)) {
    if (tmp.length) {
      itis = isdownload(tmp[0]);
    }
  } else {
    return false;
  }
  return msg.status !== void 0 && itis;
}
function isdownload(msg) {
  return msg.chapterIndex !== void 0 && msg.mangaId !== void 0;
}
function isArrExtention(msg) {
  return msg !== void 0;
}
function isListPreference(pref) {
  return pref.type == "ListPreference";
}
function isSwitchPreferenceCompat(pref) {
  return pref.type == "SwitchPreferenceCompat";
}
function isMultiSelectListPreference(pref) {
  return pref.type == "MultiSelectListPreference";
}
function isEditTextPreference(pref) {
  return pref.type == "EditTextPreference";
}
function isCheckBoxPreference(pref) {
  return pref.type == "CheckBoxPreference";
}
function isfilterCheckBox(pref) {
  return pref.type == "CheckBox";
}
function isfilterGroup(pref) {
  return pref.type == "Group";
}
function isfilterSort(pref) {
  return pref.type == "Sort";
}
function isSortState(pref) {
  return pref.index != void 0;
}
function isfilterSelect(pref) {
  return pref.type == "Select";
}
function isfilterTriState(pref) {
  return pref.type == "TriState";
}
function isfilterHeader(pref) {
  return pref.type == "Header";
}
function isfilterSeparator(pref) {
  return pref.type == "Separator";
}
function isfilterText(pref) {
  return pref.type == "Text";
}
export { isfilterCheckBox as a, isfilterSort as b, isfilterSelect as c, isfilterTriState as d, isfilterHeader as e, isfilterSeparator as f, isfilterText as g, isSortState as h, isArrExtention as i, isfilterGroup as j, isCheckBoxPreference as k, isEditTextPreference as l, isMultiSelectListPreference as m, isSwitchPreferenceCompat as n, isListPreference as o, isdlsock as p };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
